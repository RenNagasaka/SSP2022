#include <vector>
#include <iostream>
#include <stdlib.h>
#include <iterator>
#include <bitset>
#include <cstdlib>
#include <math.h>



void random_binary(std::vector<int> v, int N)
{
  int k = rand()%(N+1);
  int l;
  for (int i=0; i<16; ++i)
    {
      l = k/int(pow(2,15-i));
      v.push_back(l%2);
    }
}

int main()
{
  std::vector<std::vector<int> > Data;

  int Word_Number;
  int N_bunch = 3564;
  std::vector<std::vector<int> > Header;

  Header.push_back(std::vector<int>());
  //Word #0
  Word_Number = 0;
  Header.push_back(std::vector<int>());
  for(int j=0; j<16; j++) //TOTAL_PACKAGE_SIZE
    {
     int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=16; j<24; j++)//HEADER_SIZE
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=24; j<32; j++)//all 1
    {
      int k = 1;
      Header[Word_Number].push_back(k);
    }

  //Word #1
  Word_Number = 1;
  Header.push_back(std::vector<int>());
  for(int j=0; j<16; j++)//N_BINS
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=16; j<26; j++)//HISTOGRAM_ID
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=26; j<32; j++)//HISTOGRAM_TYPE
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }

  //Word #2
  Word_Number = 2;
  Header.push_back(std::vector<int>());
  for(int j=0; j<16; j++)//N_COUNTER_WORDS                      
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=16; j<24; j++)//INCREMENT_WIDTH                     
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=24; j<32; j++)//COUNTER_WIDTH                                       
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  //Word #3
  Word_Number = 3;
  Header.push_back(std::vector<int>());
  for(int j=0; j<20; j++)//ORBIT_COUNTER
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=20; j<30; j++)//Nan
    {
      Header[Word_Number].push_back(0);
    }
  for(int j=30; j<31; j++)//Increment Ovf            
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=31; j<32; j++)//Count Ovf
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  //Word #4 LHC Fill
  Word_Number = 4;
  Header.push_back(std::vector<int>());
  for(int j=0; j<32; j++)
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  //Word #5 CMS Run Number       
  Word_Number = 5;
  Header.push_back(std::vector<int>());
  for(int j=0; j<32; j++)
    {
      int k =rand()%2;
      Header[Word_Number].push_back(k);
    }
  //Word #6 Lumi Section 
  Word_Number = 6;
  Header.push_back(std::vector<int>());
  for(int j=0; j<32; j++)
    {
      int k =rand()%2;
      Header[Word_Number].push_back(k);
    }

  //Word #7 Lumi Nibble 
  Word_Number = 7;
  Header.push_back(std::vector<int>());
  for(int j=0; j<32; j++)
    {
      int k =rand()%2;
      Header[Word_Number].push_back(k);
    }
  //Word #8     
  Word_Number = 8;
  Header.push_back(std::vector<int>());
  for(int j=0; j<16; j++)//NUMBER_OF_MASK_AND_ERROR_WORDS
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=16; j<24; j++)//NUMBER_OF_UNITS                         
    {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }
  for(int j=24; j<32; j++)//NUMBER_OF_WORDS_PER_ERROR
   {
      int k = rand()%2;
      Header[Word_Number].push_back(k);
    }

  //Word #>8 Counter Payload
  std::vector<int> > Counter_Payload;
  for(int i=0; i<N_bunch/2+1 ; i++)
    {
      Counter_Payload.push_back(std::vector<int>());
      int k = rand()%(N+1);
      for(int j=0; j<16; j++)
        {
          int l = k/int(pow(2,15-j));
          Counter_Payload[i].push_back(l%2);
        }
      int k = rand()%(N+1);
      for(int j=16; j<32; j++)
        {
          int l = k/int(pow(2,31-j));
          Counter_Payload[i].push_back(l%2);
        }
    }

  Data.insert(Data.end(), Header.begin(), Header.end());
  Data.insert(Data.end(), Counter_Payload.begin(), Counter_Payload.end());
 
  for (int i = 0; i < Data.size(); i++)
    {
      for (int j = 0; j < Data[i].size(); j++)
        {
	  std::cout << Data[i][j] << " ";
        }    
      std::cout << std::endl;
    }


  return 0;
}
